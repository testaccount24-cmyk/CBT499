VTOC@LST CSECT
VTOC@LST AMODE 31
VTOC@LST RMODE ANY
***=================================================================***
***  GET LIST OF ALL DSCB'S ON A GIVEN DASD DEVICE.
***=================================================================***
         EDCPRLG BASEREG=((12))         .HOUSEKEEPING FOR C INTERFACE
*
         LM    R03,R10,0(R01)           .VOLSER, BUFFER, NUM & LENGTH
         MVC   VOLSER,0(R03)            .SAVE VOLSER
         ST    R05,@DSN_#AD             .SAVE ADDRESS OF # DSN'S
         USING HDR_BUFF,R10
         LH    R01,HDR_DEVS+2           .LOAD # TRKS/CYL
         ST    R01,TRKS_CYL             .SAVE # TRKS/CYL
         L     R10,HDR_UCBA             .LOAD UCB ADDRESS
         ST    R10,@UCB_ADD             .SAVE UCB ADDRESS
         DROP  R10
*
         LA    R01,DET_LEN              .LOAD LENGTH OF DETAIL LINE
         ST    R01,0(R06)               .STORE LENGTH OF DETAIL LINE
*
         XC    STAT_MAP,STAT_MAP        .CLEAR MAP STATUS FIELD
         L     R01,0(R09)               .LOAD MAP INDICATOR
         LTR   R01,R01                  .WANT A MAP ?
         BZ    NO_MAP                   .NO
*
         MVI   STAT_MAP,X'01'           .YES - SET FLAG
         USING MAP_BUFF,R07             .AND MAP DSECT
         LA    R07,MAP_LEN(0,R07)       .NEXT ENTRY
         ST    R07,@MAP_ADD             .SAVE ADDRESS OF MAP AREA
         ST    R08,@MAP_#AD             .SAVE ADDRESS OF # MAP ENTRIES
         LA    R01,MAP_LEN              .LOAD LENGTH OF MAP LINE
         ST    R01,0(R09)               .STORE LENGTH OF MAP LINE
         MVC   @MAP_NUM,=F'1'           .FIRST ENTRY IS VTOC
*
NO_MAP   EQU   *
         GETMAIN R,LV=LEN_BUF           .GET MAIN - DSCB BUFFER
         ST    R01,@BUF_ADD             .BUFFER LIST FOR CVAFFILT
         XC    RET_CODE,RET_CODE        .CLEAR RETURN CODE AREA
         XC    @DSN_NUM,@DSN_NUM        .SET # DSN'S TO ZERO
***=================================================================***
***  SET UP FILTER LIST HEADER, BUFFER LIST HEADER AND ALL ENTRIES.
***=================================================================***
         LA    R06,FCL_LIST             .FILTER LIST ADDRESS
         USING FCLID,R06                .FILTER LIST ADDRESS
         LA    R03,FCL_DSN              .DSN FILTER LIST ADDRESS
         USING FCLDSN,R03               .DSN FILTER LIST ADDRESS
         XC    FCL_LIST,FCL_LIST        .CLEAR FCL_LIST
         XC    FCL_DSN,FCL_DSN          .CLEAR FCL_DSN
         MVC   FCLID,=C'FCL '           .EYECATCHER
         MVC   FCLCOUNT,=H'1'           .ONLY ONE DSN FILTER
         MVI   FCLDSNLG,X'02'           .TWO CHARACTERS LONG (**)
         LA    R01,=C'**'               .ADRESS OF DSN FILTER
         ST    R01,FCLDSNA              .DSN FILTER ADDRESS
         DROP  R06,R03                  .END OF ADRESSABILITY
*
         XC    BFLHDR(BFLHLN),BFLHDR    .CLEAR BUFFER HEADER
         OI    BFLHFL,BFLHDSCB          .DESCRIBES DSCB ENTRIES
         MVI   BFLHNOE,DSCB_NUM         .NUMBER OF DSCB'S IN BUFFER
*
         LA    R06,BFLE                 .FIRST BUFFER LIST ENTRY
         USING BFLE,R06                 .MAP BUFFER LIST ENTRY
         LA    R03,DSCB_NUM             .NUMBER OF DSCB'S
         L     R07,@BUF_ADD             .START OF DSCB BUFFER
ENT_BUF  EQU   *
         XC    0(DSCB_LEN,R07),0(R07)   .CLEAR DSCB AREA
         XC    BFLE(BFLELN),BFLE        .CLEAR BUFFER ENTRY
         OI    BFLEFL,BFLECHR           .RETURN CCHHR
         MVI   BFLELTH-BFLE(R06),DSCB_LEN  .FULL DSCB LENGTH
         ST    R07,BFLEBUF-BFLE(,R06)   .STORE DSCB BUFFER ADDRESS
         LA    R06,BFLELN(,R06)         .NEXT BUFFER LIST ENTRY ADDR.
         LA    R07,DSCB_LEN(,R07)       .NEXT DSCB ADDRESS
         BCT   R03,ENT_BUF              .DO FOR ALL BUFFERS
         DROP  R06                      .END OF ADRESSABILITY
*
***=================================================================***
***  READ THE VTOC - FIRST TIME
***=================================================================***
         XC    CVIRCDS(40),CVIRCDS      .CLEAR CVPL ADRESSES.
         CVAFFILT ACCESS=READ,          .ALL DSCB'S FROM BEGINNING     +
               FLTAREA=KEEP,            .KEEP FILTER AREA              +
               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +
               FCL=FCL_LIST,            .ALL DSN'S                     +
               UCB=(R10),               .UCB ADRESS FROM UCBLOOK MACRO +
               MF=(E,CVPL_MAP)          .POINTER TO LIST FORM MACRO
         LTR   R15,R15                  .CHECK RETURN CODE
         BZ    NEX_FILT                 .SUCCESFULL
         TM    CVSTAT,STAT064           .MORE DSCB'S TO READ ?
         BO    NEX_FILT                 .YES
         TM    CVSTAT,STAT073           .MORE DSCB'S TO READ ?
         BO    NEX_FILT                 .YES
         B     ERR_FLT                  .SOMETHING WRONG
*
***=================================================================***
***  SET UP OUTPUT LINE FOR ALL DSN'S
***=================================================================***
NEX_FILT EQU   *
         XR    R10,R10                  .CLEAR DSCB COUNTER
         LA    R06,FCL_LIST             .FILTER LIST ADDRESS
         USING FCLID,R06                .FILTER LIST ADDRESS
         LH    R10,FCLDSCBR             .NUMBER OF DSCB'S
         DROP  R06                      .DROP FCL ADDR.
         L     R11,@BUF_ADD             .START OF DSCB BUFFER
         USING IECSDSL1,R11             .MAPPING FOR DSCB1 BUFFER
         USING DET_BUFF,R04             .MAPPING FOR RETURN BUFFER
NEX_DSCB EQU   *
         DROP  R11                      .USE SAME REGISTER - DSCB1/3
         USING IECSDSL1,R11             .MAPPING FOR DSCB1 BUFFER
         CLI   DS1FMTID,X'F1'           .FORMAT 1 ?
         BNE   LAST_ENT                 .NO - LAST DSCB PROCESSED
         MVC   DET_DSOI,=C'PS  '
         TM    DS1DSORG,DS1DSGPS        .SEQUENTIAL ?
         BO    GOTDSORG                 .YES, BRANCH.
         MVC   DET_DSO,=C'PO'
         TM    DS1DSORG,DS1DSGPO        .PDS ?
         BO    GOTDSORG                 .YES, BRANCH.
         MVC   DET_DSO,=C'VS'
         MVC   DET_RECI,=C'.  '         .NO RECFM
         TM    DS1DSORG+1,DS1ORGAM      .VSAM ?
         BO    NEXTOUT                  .YES, BRANCH.
         MVC   DET_DSO,=C'DA'
         TM    DS1DSORG,DS1DSGDA        .DIRECT ACCESS ?
         BO    GOTDSORG                 .YES, BRANCH.
         MVC   DET_DSO,=C'IS'
         TM    DS1DSORG,DS1DSGIS        .ISAM ?
         BO    GOTDSORG                 .YES, BRANCH.
         MVC   DET_DSO,=C'CX'
         TM    DS1DSORG,DS1DSGCX        .BTAM/QTAM ?
         BO    GOTDSORG                 .YES, BRANCH.
         MVC   DET_DSO,=C'GS'
         TM    DS1DSORG+1,DS1DSGGS      .GRAPHICS ?
         BO    GOTDSORG                 .YES, BRANCH.
         MVC   DET_DSO,=C'TX'
         TM    DS1DSORG+1,DS1DSGTX      .TCAM LINE GROUP ?
         BO    GOTDSORG                 .YES, BRANCH.
         MVC   DET_DSO,=C'TQ'
         TM    DS1DSORG+1,DS1DSGTQ      .TCAM MESSAGE QUEUE ?
         BO    GOTDSORG                 .YES, BRANCH.
         MVC   DET_DSO,=C' ?'           .UNKNOWN DSORG.
*
GOTDSORG EQU   *
         MVC   DET_DSO1,=C'U '
         TM    DS1DSORG,DS1DSGU         .UNMOVABLE ?
         BO    SETRECM                  .YES, BRANCH.
******** MVC   DET_DSO1,=C'-H'
         TM    DS1SMSFG,DS1PDSEX        .HFS ?
         BNO   TESTPDSE                 .NO, TEST FOR PDSE
         MVC   DET_DSOI,=C'HFS '        .YES, SET DSORG
         B     SETRECM                  .BRANCH.
TESTPDSE EQU   *
         MVC   DET_DSO1,=C'-E'
         TM    DS1SMSFG,DS1PDSE         .PDSE ?
         BO    SETRECM                  .YES, BRANCH.
         MVC   DET_DSO1,=C'  '
*
SETRECM  EQU    *
         MVC   DET_RECI,=C'U  '
         TM    DS1RECFM,DS1RECFU        .UNDEFINED LENGTH
         BO    NEXTOUT
         MVC   DET_REC1,=C'F'
         TM    DS1RECFM,DS1RECFF        .FIXED LENGTH
         BO    CHKBLKED
         MVC   DET_REC1,=C'V'
         TM    DS1RECFM,DS1RECFV        .VARIABLE LENGTH
         BO    CHKBLKED
         MVC   DET_REC1,=C'T'
         TM    DS1RECFM,DS1RECFT        .TRACK OVERFLOW
         BO    CHKBLKED
         MVC   DET_REC1,=C'?'
*
CHKBLKED EQU   *
         TM    DS1RECFM,DS1RECFB        .BLOCKED RECORDS
         BNO   TSTSPAN
         MVC   DET_REC2,=C'B'
*
TSTSPAN  EQU   *
         TM    DS1RECFM,DS1RECFS        .SPANNED RECORDS
         BNO   TSTANSI
         CLC   DET_REC2,=C'B'
         BNE   SETSPAN
         MVC   DET_REC3,=C'S'
         B     NEXTOUT
SETSPAN  EQU   *
         MVC   DET_REC2,=C'S'
         B     NEXTOUT
*
TSTANSI  EQU   *
         TM    DS1RECFM,DS1RECFA        .ANSI RECORDS
         BNO   TSTMC
         CLC   DET_REC2,=C'B'
         BNE   SETANSI
         MVC   DET_REC3,=C'A'
         B     NEXTOUT
SETANSI  EQU   *
         MVC   DET_REC2,=C'A'
         B     NEXTOUT
*
TSTMC    EQU   *
         TM    DS1RECFM,DS1RECMC        .MACHINE CONTROL
         BNO   NEXTOUT
         CLC   DET_REC2,=C'B'
         BNE   SETMC
         MVC   DET_REC3,=C'M'
         B     NEXTOUT
SETMC    EQU   *
         MVC   DET_REC2,=C'M'
*
NEXTOUT  EQU   *
         TM    DS1DSIND,DS1IND40        .RACF DEFINED ?
         BO    SETRACF                  .YES, BRANCH.
         MVC   DET_RACF,=C' NO'         .NOT RACF DEFINED
         B     OUTEXTV
SETRACF  EQU   *
         MVC   DET_RACF,=C'YES'         .RACF DEFINED
*
OUTEXTV EQU    *
         MVC   DET_DSN(44),DS1DSNAM     .MOVE DATA SET NAME
*
         XR    R03,R03                  .CLEAR
         IC    R03,DS1NOEPV             .# OF EXTENTS ON VOLUME
         LR    R02,R03                  .# OF EXTENT FOR CALC.
         STH   R03,DET_EXT              .  AND STORE
*
         MVC   DET_SEQ,DS1VOLSQ         .VOLUME SEQUENCE NUMBER
         MVC   DET_BLKS,DS1BLKL         .BLOCK SIZE
         MVC   DET_LREC,DS1LRECL        .LRECL
*
         XR    R03,R03                  .CLEAR
         IC    R03,DS1REFD              .YEAR PART OF REFERENCE DATE
         STH   R03,DET_REFY             .YEAR PART OF REFERENCE DATE
         LH    R09,DS1REFD+1            .DAYS OF REFERENCE DATE
         BAL   R14,JULGREGC
         STH   R07,DET_REFM             .MONTH OF YEAR
         STH   R09,DET_REFD             .DAY OF MONTH
*
         IC    R03,DS1CREDT             .YEAR PART OF CREATION DATE
         STH   R03,DET_CREY             .YEAR PART OF CREATION DATE
         LH    R09,DS1CREDT+1           .DAYS OF CREATION DATE
         BAL   R14,JULGREGC
         STH   R07,DET_CREM             .MONTH OF YEAR
         STH   R09,DET_CRED             .DAY OF MONTH
*
         IC    R03,DS1EXPDT             .YEAR PART OF EXPIRY DATE
         STH   R03,DET_EXPY             .YEAR PART OF EXPIRY DATE
         LA    R01,DS1EXPDT+1           .DAYS OF EXPIRY DATE
         LH    R09,0(R01)               .DAYS OF EXPIRY DATE
         BAL   R14,JULGREGC
         STH   R07,DET_EXPM             .MONTH OF YEAR
         STH   R09,DET_EXPD             .DAY OF MONTH
*
         L     R08,TRKS_CYL             .LOAD # TRKS/CYL
         XR    R05,R05                  .CLEAR FOR TOTAL # TRKS
         XR    R09,R09                  .CLEAR FOR TOTAL # CYLS
         LTR   R02,R02                  .CHECK # EXTENTS
         BZ    NO_SPACE                 .NO SPACE SPECIFIED
         LA    R03,DS1EXT1              .ADDRESS OF 1ST EXTENT
         BAL   R14,CALCUSED             .CALC USED SPACE
         LA    R03,DS1EXT2              .ADDRESS OF 2ND EXTENT
         BAL   R14,CALCUSED             .CALC USED SPACE
         LA    R03,DS1EXT3              .ADDRESS OF 3RD EXTENT
         BAL   R14,CALCUSED             .CALC USED SPACE
*
         LA    R11,DSCB_LEN(0,R11)      .NEXT DSCB - MUST BE F3
         BCT   R10,GETDSCB3             .DECREMENT AND BRANCH
         B     ERR_VTOC                 .SOMETHING ROTTEN.....
*
GETDSCB3 EQU   *
         DROP  R11                      .USE SAME REGISTER - DSCB1/3
         USING IECSDSL3,R11             .MAPPING FOR DSCB3 BUFFER
         CLI   DS3FMTID,X'F3'           .FORMAT 3 ?
         BE    DSCB3_A                  .YES, ADDRESS DSCB3
         CLI   DS3FMTID,X'F2'           .FORMAT 2 ?
         BNE   NEX_DSCB                 .MUST BE NEXT F1 DSCB
         LA    R11,DSCB_LEN(0,R11)      .NEXT DSCB
         BCT   R10,GETDSCB3             .DECREMENT AND BRANCH
         B     LAST_ENT                 .ONLY IF LAST DSCB
*
NO_SPACE EQU   *
         MVC   DET_CYLA,=H'0'           .ZERO SPACE ALLOCATION
         MVC   DET_TRKA,=H'0'           .ZERO SPACE ALLOCATION
         B     END_DSCB                 .PRINT OUTPUT
*
DSCB3_A  EQU   *
         LA    R03,DS3EXTNT             .ADDR. OF 1ST OF 4 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 2ND OF 4 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 3RD OF 4 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 4TH OF 4 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
*
         LA    R03,DS3ADEXT             .ADDR. OF 1ST OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 2ND OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 3RD OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 4TH OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 5TH OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 6TH OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 7TH OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 8TH OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
         LA    R03,10(,R03)             .ADDR. OF 9TH OF 9 EXTENTS
         BAL   R14,CALCUSED             .CALC. USED SPACE
*
         LA    R11,DSCB_LEN(0,R11)      .NEXT DSCB - MUST BE F3
         BCT   R10,GETDSCB3             .DECREMENT AND BRANCH
         B     ERR_VTOC                 .SOMETHING ROTTEN.....
*
CALCEND1 EQU   *
         STH   R05,DET_TRKA             .TRKS ALLOCATED
         STH   R09,DET_CYLA             .CYLS ALLOCATED
*
END_DSCB EQU   *
         LA    R11,DSCB_LEN(0,R11)      .NEXT DSCB
         L     R01,@DSN_NUM             .# OF DSN'S
         LA    R01,1(,R01)              .INCREMENT # DSN'S
         ST    R01,@DSN_NUM             .# OF DSN'S
         LA    R04,DET_LEN(0,R04)       .NEXT DETAIL LINE
         BCT   R10,NEX_DSCB             .DECREMENT AND BRANCH
*
LAST_ENT EQU   *
         TM    CVSTAT,STAT064           .MORE DSCB'S TO READ ?
         BO    NEXT_LOT                 .YES
         TM    CVSTAT,STAT073           .MORE DSCB'S TO READ ?
         BO    NEXT_LOT                 .YES
         B     END_PROG                 .END OF PROGRAM
*
NEXT_LOT EQU   *
         L     R10,@UCB_ADD             .LOAD UCB ADDRESS
         CVAFFILT ACCESS=RESUME,        .NEXT LOT OF DSCB'S            +
               FLTAREA=KEEP,            .KEEP FILTER AREA              +
               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +
               FCL=FCL_LIST,            .ALL DSN'S                     +
               UCB=(R10),               .UCB ADRESS FROM UCBLOOK MACRO +
               MF=(E,CVPL_MAP)          .POINTER TO LIST FORM MACRO
         LTR   R15,R15                  .CHECK RETURN CODE
         BZ    NEX_FILT                 .LAST LOT OF DSCB'S
         TM    CVSTAT,STAT064           .MORE DSCB'S TO READ ?
         BO    NEX_FILT                 .YES
         TM    CVSTAT,STAT073           .MORE DSCB'S TO READ ?
         BO    NEX_FILT                 .YES
         B     ERR_FLTR                 .SOMETHING WRONG
*
***=================================================================***
***  ERROR ROUTINES
***=================================================================***
ERR_VTOC EQU    *
         ST    R15,RET_CODE             .SAVE RETURN CODE
         MVC   WTO_VTOC+20(6),VOLSER    .MOVE VOLSER
WTO_VTOC EQU   *
         WTO   '*** VOLSER: ...... --- VTOC SEQUENCE ERROR      '
         B     END_PROG
*
ERR_FLT  EQU    *
         ST    R15,RET_CODE             .SAVE RETURN CODE
         MVC   WTO_FLT+20(6),VOLSER     .MOVE VOLSER
WTO_FLT  EQU   *
         WTO   '*** VOLSER: ...... --- RC > 0 FROM CVAFFILT READ'
         B     END_PROG
*
ERR_FLTR EQU    *
         ST    R15,RET_CODE             .SAVE RETURN CODE
         MVC   WTO_FLTR+20(6),VOLSER    .MOVE VOLSER
WTO_FLTR EQU   *
         WTO   '*** VOLSER: ...... --- RC > 0 FROM CVAFFILT RESUME'
         B     END_PROG
*
***=================================================================***
***  END OF PROGRAM.
***=================================================================***
END_PROG EQU   *
         TM    STAT_MAP,STAT_YES        .WANT A MAP ?
         BNO   END_REAL                 .NO
         L     R06,@MAP_#AD             .ADDR. OF # MAP ENTRIES
         MVC   0(4,R06),@MAP_NUM        .MOVE TO OUTPUT
*
END_REAL EQU   *
         L     R06,@DSN_#AD             .ADDR. OF # DSN'S PROCESSED
         MVC   0(4,R06),@DSN_NUM        .MOVE TO OUTPUT
         L     R01,@BUF_ADD             .BUFFER ADDRESS
         FREEMAIN R,LV=LEN_BUF,A=(R01)  .FREE STORAGE
*
         CVAFFILT ACCESS=RLSE,          .RELEASE ACCESS LIST           +
               FLTAREA=NOKEEP,          .FREE FILTER AREA              +
               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +
               FCL=FCL_LIST,            .ALL DSN'S                     +
               MF=(E,CVPL_MAP)          .POINTER TO LIST FORM MACRO
         L     R15,RET_CODE             .SET RETURN CODE
         EDCEPIL                        .PROGRAM EPILOG FOR C
*
***=================================================================***
***  CONVERT JULIAN TO GREGORIAN DATE
***=================================================================***
JULGREGC EQU   *
         XR    R07,R07                  .CLEAR
         LTR   R09,R09                  .DATE ZEROES ?
         BNZ   VALDAT                   .NO ? CONVERT DATE
         BR    R14
***=================================================================***
***  CHECK FOR LEAP YEAR
***=================================================================***
VALDAT   EQU   *
         STC   R03,##WORK               .STORE YEAR FOR TEST
         MVC   CALNDR,CALENDR           .MOVE #DAYS TO WORKAREA
         TM    ##WORK,X'03'             .YEAR MULTIPLE OF 4 ?
         BNZ   DATCONV                  .NO, NOT LEAP YEAR
         TM    ##WORK,X'FF'             .CENTURY BOUNDARY ?
         BNZ   LEAPYR                   .NO, LEAP YEAR
***      TM    ##WORK,X'03'             .CENTURY MULTIPLE OF 4 ?
***      BNZ   DATCONV                  .NO, NOT LEAP YEAR
LEAPYR   MVI   FEB,X'1D'                .SET NO OF DAYS IN FEB=29
*
***=================================================================***
***  CALCULATE MONTH OF YEAR AND DAY OF MONTH
***=================================================================***
DATCONV  EQU   *
         XR    R06,R06                  .CLEAR
         LA    R07,1                    .MONTH COUNTER = 1
         LA    R08,CALNDR               .CALENDAR POINTER TO JANUARY
CALCMON  EQU   *
         IC    R06,0(R08)               .STORE NUMBER OF DAYS IN MONTH
         SR    R09,R06                  .SUBTRACT FROM DAY OF YEAR
         BNP   LASTMON                  .DONE IF RESULT <= 0
         LA    R07,1(R07)               .INCREMENT MONTH COUNTER BY 1
         LA    R08,1(R08)               .CALENDAR POINTER = NEXT MONTH
         B     CALCMON                  .DO NEXT CALCULATION
LASTMON  EQU   *
         AR    R09,R06                  .ADD LAST MONTH
         BR    R14
*
***=================================================================***
***  SET UP DASD MAPPING AND CALCULATE ALLOCATED SPACE FOR A DATA SET
***=================================================================***
CALCUSED EQU   *
         ST    R05,SAVR05               .SAVE TOTAL # TRKS
         ST    R09,SAVR09               .SAVE TOTAL # CYLS
         ST    R14,SAVR14               .SAVE RETURN ADDRESS
         XR    R05,R05                  .CLEAR FOR TOTAL # TRKS
         XR    R09,R09                  .CLEAR FOR TOTAL # CYLS
CALC_NOM EQU   *
         LH    R06,2(R03)               .START CYL ADDR.
         LH    R07,6(R03)               .END CYL ADDR.
         SR    R07,R06                  .CALC # FULL CYLS USED
         BZ    TRKONE                   .START + END ON SAME CYL
         BCT   R07,CYLADD               .ADD CYL TO TOTAL
         B     TRKBEG                   .START + END ON ADJ. CYL
CYLADD   EQU   *
         AR    R09,R07                  .ADD TO TOTAL # CYLS
TRKBEG   EQU   *
         LH    R06,4(R03)               .START TRK ADDR.
         LTR   R06,R06                  .START TRK ADDRESS=0 ?
         BNZ   CALCBEG                  .NO, CALCULATE TRKS
         LA    R09,1(,R09)              .ANOTHER FULL CYLINDER
         B     TRKEND                   .DO END TRK CALC.
CALCBEG  EQU   *
         LR    R07,R08                  .# TRKS/CYL
         SR    R07,R06                  .CALC # TRKS
         AR    R05,R07                  .ADD TO TOTAL TRKS
TRKEND   EQU   *
         LH    R07,8(R03)               .END TRK ADDR.
         LA    R07,1(,R07)              .CORRECTION FOR CALCULATION
         CR    R07,R08                  .END TRK ADDRESS=TRKS/CYL ?
         BNE   CALCEND                  .NO, CALCULATE TRKS
         LA    R09,1(,R09)              .ANOTHER FULL CYLINDER
         B     CALC_MAP                 .DO NEXT CALCULATION
CALCEND  EQU   *
         AR    R05,R07                  .ADD TO TOTAL TRKS
         B     CALC_MAP                 .DO NEXT CALCULATION
TRKONE   EQU   *
         LH    R06,4(R03)               .START TRK ADDR.
         LH    R07,8(R03)               .END TRK ADDR.
         LA    R07,1(,R07)              .CORRECTION FOR CALCULATION
         LTR   R06,R06                  .START TRK ADDRESS=0 ?
         BNZ   CALCONE                  .NO, CALCULATE TRKS
         CR    R07,R08                  .END TRK ADDRESS=TRKS/CYL ?
         BNZ   CALCONE                  .NO, CALCULATE TRKS
         LA    R09,1(,R09)              .ONE FULL CYLINDER
         B     CALC_MAP                 .DO NEXT CALCULATION
CALCONE  EQU   *
         SR    R07,R06                  .CALC # TRKS
         AR    R05,R07                  .ADD TO TOTAL TRKS
*
CALC_MAP EQU   *
         TM    STAT_MAP,STAT_YES        .WANT A MAP ?
         BNO   CALC_END                 .NO
         LR    R06,R03                  .GET CCHHR POINTER
         L     R07,@MAP_ADD             .LOAD MAP ADDRESS
         USING MAP_BUFF,R07             .    AND MAP DSECT
*
         XR    R03,R03                  .CLEAR
         IC    R03,1(R06)               .EXTENT NUMBER
         LA    R03,1(,R03)              .    NUMBERED 0-14 - CHANGE
         STH   R03,MAP_EXTN             .    AND STORE
*
         MVC   MAP_VTOC(8),2(R06)       .VTOC ADDRESS
*
         STH   R05,MAP_TRKA             .STORE TRKS ALLOCATED
         STH   R09,MAP_CYLA             .STORE CYLS ALLOCATED
         LH    R03,DET_EXT              .LOAD # EXTENTS
         STH   R03,MAP_EXT              .     AND STORE TO MAP
         MVC   MAP_DSN,DET_DSN          .MOVE DATA SET NAME
*
         DROP  R07                      .END ADDRESSABILITY
         LA    R07,MAP_LEN(0,R07)       .NEXT ENTRY
         ST    R07,@MAP_ADD             .STORE NEW ADDRESS
         L     R01,@MAP_NUM             .# OF MAP ENTRIES
         LA    R01,1(,R01)              .INCREMENT # MAP ENTRIES
         ST    R01,@MAP_NUM             .# OF MAP ENTRIES
         LR    R03,R06                  .RESTORE OFFSET
*
CALC_END EQU   *
         L     R06,SAVR05               .TOTAL # TRKS
         AR    R05,R06                  .TOTAL # TRKS
         L     R06,SAVR09               .TOTAL # CYLS
         AR    R09,R06                  .TOTAL # CYLS
         L     R14,SAVR14               .LOAD RETURN ADDRESS
         BCTR  R02,R14                  .RETURN IF MORE EXTENTS
         B     CALCEND1                 .END OF FREE SPACE
*
***=================================================================***
***  VARIABLES, CONSTANTS AND UCB
***=================================================================***
         LTORG
         EQUATES1
DSCB_NUM EQU   255                      .NUMBER OF DSCB'S
LEN_BUF  EQU   DSCB_LEN*DSCB_NUM        .LENGTH OF DSCB BUFFER
*
@DSN_NUM DS    F                        .# DSN'S
@DSN_#AD DS    F                        .ADDR OF # DSN'S
@MAP_NUM DS    F                        .# MAP ENTRIES
@MAP_#AD DS    F                        .ADDR OF # MAP ENTRIES
@BUF_ADD DS    F                        .BUFFER ADDRESS
@MAP_ADD DS    F                        .ADDR OF MAP
@UCB_ADD DS    F                        .STORAGE AREA FOR UCB ADDRESS
*
RET_CODE DS    F                        .RETURN CODE
SAVR05   DS    F                        .FOR TRK CALC
SAVR09   DS    F                        .FOR CYL CALC
SAVR14   DS    F                        .RETURN ADDRESS FOR BAL
TRKS_CYL DS    F                        .# TRKS/CYL
VOLSER   DS    CL6                      .VOLSER
CALENDR  DC    X'1F1C1F1E1F1E1F1F1E1F1E1F'  .# DAYS ON YEAR
STAT_MAP DS    XL1                      .MAP STATUS TESTING
STAT_YES EQU   X'01'                    .MAP STATUS TESTING
*
##WORK   DS    XL1                      .WORKAREA
*
CALNDR   DS    0XL12                    .LENGTH OF CALENDER
         DS    XL1                      .# DAYS IN JAN
FEB      DS    XL1                      .# DAYS IN FEB
         DS    XL10                     .# DAYS IN REST OF YEAR
*
FCL_LIST DS    XL16                     .FILTER CRITERIA LIST
FCL_DSN  DS    XL8                      .FILTER CRITERIA LIST
*
CVPL_MAP CVAFFILT ACCESS=READ,          .ALL DSCB'S FROM BEGINNING     +
               FLTAREA=KEEP,            .KEEP FILTER AREA              +
               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +
               FCL=FCL_LIST,            .ALL DSN'S                     +
               MF=L                     .LIST FORM OF MACRO
         ORG   CVPL_MAP
         ICVAFPL DSECT=NO
*
         ORG   ,                        .RESET POINTER
         ICVAFBFL DSECT=NO              .BUFFER LIST
         DS    CL((DSCB_NUM-1)*BFLELN)  .REST OF ENTRIES
*
         EDCDSAD                        .SAVE AREA FOR C INTERFACE
*
         ICVFCL DSECT=YES               .FILTER CRITERIA LIST MAPPING
*
         VTC@MAPB                       .MAPPING FOR ALLOCATION MAP
         VTC@DETB                       .MAPPING FOR DSN LIST
         VTC@HDRB                       .MAPPING FOR HEADER INFO AREA
*
         DSECT                          .DSCB
         IECSDSL1 (1)                   .FORMAT 1 DSCB
DSCB_LEN EQU   *-IECSDSL1               .LENGTH OF DSCB
         IECSDSL1 (3)                   .FORMAT 3 DSCB
         END
